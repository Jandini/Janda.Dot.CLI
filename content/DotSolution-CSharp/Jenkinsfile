import groovy.json.JsonSlurperClassic
properties([[$class: 'GitLabConnectionProperty', gitLabConnection: 'NAS']])

def updateStatus(String status) {
    updateGitlabCommitStatus(state: status);
}

def dotnet(String commands) {
    bat """
        @echo off
        pushd src
        dotnet ${commands}
        set ERRORCODE=%ERRORLEVEL%
        popd
        exit /b %ERRORCODE%
    """
}

def cmd(String directory, String command) {
    bat """
        @echo off
        pushd cid\\${directory}
        ${command}.cmd
        set ERRORCODE=%ERRORLEVEL%
        popd
        exit /b %ERRORCODE%
    """
}


def ps(String directory, String command) {
    powershell "./cid/${directory}/${command}"
}

def Object getGitVersion() {
	jsonText = bat(returnStdout: true, script: '@gitversion')
	println "${jsonText}"
	return new JsonSlurperClassic().parseText(jsonText)  			
}


def String getPackageFtpLinkText(String link, String text) {
	def ftp = "ftp://nas/builds/dot.solution/" + link
	return hudson.console.ModelHyperlinkNote.encodeTo(ftp, text);
}


def void getPackageLinks(Object gitVersion) {
	branch = getPackageFtpLinkText("${gitVersion.BranchName}", gitVersion.BranchName)
	version = getPackageFtpLinkText("${gitVersion.BranchName}/${gitVersion.InformationalVersion}", gitVersion.InformationalVersion)	
	println "Branch:    ${branch}\nVersion:   ${version}\n          "
}


node("matt10") {
    
    try {

        def gitVersion
        updateStatus('running')

        stage('Init') {
            milestone Integer.parseInt(env.BUILD_ID)
            deleteDir()  
        }
        
        stage('Checkout') {
            milestone()
            checkout scm
            gitVersion = getGitVersion();
        }

        stage('Build') {
            milestone()
            cmd('win7-x64', 'pack')
        }
                
        stage('Cleanup') {
            milestone()
            deleteDir()                
        } 

        stage ('Package') {
            getPackageLinks(gitVersion)	
        }
       
        updateStatus('success')
    }
    catch (e) {
        updateStatus('failed')
        throw e
    }
}
